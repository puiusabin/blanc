scalar DateTime

type User {
  id: ID!
  walletAddress: String!
  publicKey: String!
  signingPublicKey: String!
  aliases: [Alias!]!
  folders: [Folder!]!
  createdAt: DateTime!
}

type Email {
  id: ID!
  encryptedData: String!
  encryptedSessionKey: String!
  r2BlobKey: String
  threadId: String
  timestamp: DateTime!
  size: Int!
  isRead: Boolean!
  isStarred: Boolean!
  folder: Folder
  attachments: [Attachment!]!
}

type Attachment {
  id: ID!
  encryptedMetadata: String!
  r2BlobKey: String!
  size: Int!
}

type Folder {
  id: ID!
  name: String!
  type: String!
  color: String
  sortOrder: Int!
  emailCount: Int!
}

type Alias {
  id: ID!
  address: String!
  displayName: String
  isDefault: Boolean!
}

input SendEmailInput {
  encryptedData: String!
  encryptedSessionKeys: [EncryptedSessionKeyInput!]!
  recipientAddresses: [String!]!
  r2BlobKey: String
  threadId: String
  attachments: [AttachmentInput!]
}

input EncryptedSessionKeyInput {
  recipientPublicKey: String!
  encryptedSessionKey: String!
}

input AttachmentInput {
  encryptedMetadata: String!
  r2BlobKey: String!
  size: Int!
}

input CreateFolderInput {
  name: String!
  color: String
}

input CreateAliasInput {
  address: String!
  displayName: String
}

type SRPChallenge {
  challenge: String!
  nonce: String!
  timestamp: DateTime!
}

type AuthPayload {
  user: User!
  sessionToken: String!
}

type Query {
  currentUser: User
  emails(folderId: ID, limit: Int, offset: Int): [Email!]!
  email(id: ID!): Email
  folders: [Folder!]!
  aliases: [Alias!]!
  searchEmails(query: String!): [Email!]!
}

type Mutation {
  # Auth mutations
  startLogin(walletAddress: String!): SRPChallenge!
  completeLogin(walletAddress: String!, signature: String!, nonce: String!): AuthPayload!
  
  # Email mutations
  sendEmail(input: SendEmailInput!): Email!
  updateEmailReadStatus(id: ID!, isRead: Boolean!): Email!
  updateEmailStarStatus(id: ID!, isStarred: Boolean!): Email!
  moveEmailToFolder(id: ID!, folderId: ID!): Email!
  deleteEmail(id: ID!): Boolean!
  
  # Folder mutations
  createFolder(input: CreateFolderInput!): Folder!
  updateFolder(id: ID!, name: String, color: String): Folder!
  deleteFolder(id: ID!): Boolean!
  
  # Alias mutations
  createAlias(input: CreateAliasInput!): Alias!
  updateAlias(id: ID!, displayName: String): Alias!
  deleteAlias(id: ID!): Boolean!
}

type Subscription {
  emailReceived: Email!
  emailUpdated: Email!
}